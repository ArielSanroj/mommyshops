version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mommyshops-postgres
    environment:
      POSTGRES_DB: mommyshops
      POSTGRES_USER: mommyshops
      POSTGRES_PASSWORD: secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - mommyshops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mommyshops"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mommyshops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mommyshops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python Backend
  python-backend:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: mommyshops-python
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://mommyshops:secure_password_123@postgres:5432/mommyshops
      - REDIS_URL=redis://redis:6379/0
      - PYTHON_BACKEND_URL=http://python-backend:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mommyshops-network
    volumes:
      - ./backend-python:/app
      - python_cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Java Backend
  java-backend:
    build:
      context: ./backend-java
      dockerfile: Dockerfile
    container_name: mommyshops-java
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mommyshops
      - SPRING_DATASOURCE_USERNAME=mommyshops
      - SPRING_DATASOURCE_PASSWORD=secure_password_123
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - PYTHON_BACKEND_URL=http://python-backend:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      python-backend:
        condition: service_healthy
    networks:
      - mommyshops-network
    volumes:
      - ./backend-java:/app
      - java_cache:/app/.m2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: mommyshops-celery
    command: celery -A backend.services.celery_service worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://mommyshops:secure_password_123@postgres:5432/mommyshops
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      - postgres
      - redis
    networks:
      - mommyshops-network
    volumes:
      - ./backend-python:/app

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: mommyshops-celery-beat
    command: celery -A backend.services.celery_service beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://mommyshops:secure_password_123@postgres:5432/mommyshops
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      - postgres
      - redis
    networks:
      - mommyshops-network
    volumes:
      - ./backend-python:/app

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mommyshops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mommyshops-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mommyshops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mommyshops-network

  # Nginx (Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: mommyshops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - java-backend
      - python-backend
    networks:
      - mommyshops-network

volumes:
  postgres_data:
  redis_data:
  python_cache:
  java_cache:
  prometheus_data:
  grafana_data:

networks:
  mommyshops-network:
    driver: bridge
