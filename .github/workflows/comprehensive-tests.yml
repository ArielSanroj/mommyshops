name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Python Backend Tests
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mommyshops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install alembic
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mommyshops_test" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DEBUG=false" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        cd backend-python
        alembic upgrade head
    
    - name: Run security audit
      run: |
        cd backend-python
        python scripts/audit_sql_injection.py
    
    - name: Run linting
      run: |
        cd backend-python
        flake8 app/ --max-line-length=100 --ignore=E203,W503
        black --check app/
        isort --check-only app/
        mypy app/ --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        cd backend-python
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Run integration tests
      run: |
        cd backend-python
        pytest tests/integration/ -v --cov=app --cov-append
    
    - name: Run functional tests
      run: |
        cd backend-python
        pytest tests/functional/ -v --cov=app --cov-append
    
    - name: Run security tests
      run: |
        cd backend-python
        pytest tests/test_security.py tests/test_security_enhanced.py tests/test_database_security.py -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-python/coverage.xml
        flags: python
        name: python-coverage

  # Java Backend Tests
  java-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: ['11', '17', '21']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mommyshops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    
    - name: Run Maven tests
      run: |
        cd backend-java
        mvn clean test -Dspring.profiles.active=test
    
    - name: Run Maven integration tests
      run: |
        cd backend-java
        mvn verify -Dspring.profiles.active=test
    
    - name: Generate JaCoCo report
      run: |
        cd backend-java
        mvn jacoco:report
    
    - name: Upload JaCoCo coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-java/target/site/jacoco/jacoco.xml
        flags: java
        name: java-coverage

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [python-tests, java-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mommyshops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install alembic
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mommyshops_test" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DEBUG=false" >> $GITHUB_ENV
    
    - name: Start Python backend
      run: |
        cd backend-python
        alembic upgrade head
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Start Java backend
      run: |
        cd backend-java
        mvn spring-boot:run -Dspring.profiles.active=test &
        sleep 15
    
    - name: Run E2E tests
      run: |
        pytest tests/e2e/ -v --timeout=300
    
    - name: Test API integration
      run: |
        python scripts/run_integration_tests.py

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      run: |
        cd backend-python
        bandit -r app/ -f json -o bandit-report.json
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
    
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto backend-python/ --json --output=semgrep-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend-python/bandit-report.json
          safety-report.json
          semgrep-report.json

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [python-tests, java-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mommyshops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mommyshops_test" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DEBUG=false" >> $GITHUB_ENV
    
    - name: Start application
      run: |
        cd backend-python
        alembic upgrade head
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --html performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  # Coverage Report
  coverage-report:
    runs-on: ubuntu-latest
    needs: [python-tests, java-tests, e2e-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports
        path: coverage/
    
    - name: Generate combined coverage report
      run: |
        echo "Combined Coverage Report" > coverage-summary.md
        echo "========================" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "Python Backend: $(cat coverage/python-coverage.txt)" >> coverage-summary.md
        echo "Java Backend: $(cat coverage/java-coverage.txt)" >> coverage-summary.md
        echo "E2E Tests: $(cat coverage/e2e-coverage.txt)" >> coverage-summary.md
    
    - name: Upload combined report
      uses: actions/upload-artifact@v3
      with:
        name: combined-coverage-report
        path: coverage-summary.md

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [python-tests, java-tests, e2e-tests, security-tests, performance-tests]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.python-tests.result == 'success' && needs.java-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
    
    - name: Notify on failure
      if: ${{ needs.python-tests.result == 'failure' || needs.java-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Please check the logs."
